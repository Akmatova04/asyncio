# Керектүү модулдарды импорттоо
import asyncio

# Атайылап ката ыргыткан асинхрондук функция (корутина)
async def ката_менен_тапшырма():
    """
    Бул асинхрондук функция бир аз күткөндөн кийин
    атайылап 'ValueError' катасын ыргытат.
    """
    print("Ката менен тапшырма башталды...")
    await asyncio.sleep(1)  # 1 секунд күтүү
    print("Азыр ката ыргытылат!")
    # ValueError катасын ыргытуу
    raise ValueError("Бул атайын ыргытылган ката!")
    # Төмөнкү сап эч качан аткарылбайт, анткени жогоруда ката ыргытылды
    # print("Тапшырма ийгиликтүү аяктады (бул чыкпашы керек).")

# Башка асинхрондук функцияны чакырып, андагы катаны кармаган корутина
async def ката_менен_тапшырманы_чакыруу_жана_кармоо():
    """
    Бул корутина 'ката_менен_тапшырма' функциясын чакырат жана
    анын ичинде ыргытылган катаны 'try...except' блогу аркылуу кармайт.
    """
    print("Каталуу болушу мүмкүн болгон тапшырманы чакыруу...")
    try:
        # 'ката_менен_тапшырма' корутинасын 'await' менен чакыруу
        await ката_менен_тапшырма()
        # Эгер 'ката_менен_тапшырма' ийгиликтүү аяктаса (ката ыргытпаса),
        # бул сап аткарылмак (бирок бул учурда аткарылбайт).
        print("Тапшырма ийгиликтүү аяктады (try блогунан).")
    except ValueError as e: # Эгер 'ValueError' катасы ыргытылса, аны кармоо
        print(f"\nОЙ! Ката кармалды:")
        print(f"  Катанын түрү: {type(e)}")
        print(f"  Катанын билдирүүсү: {e}")
    except Exception as e: # Башка күтүлбөгөн каталар үчүн жалпы кармоочу
        print(f"\nБашка күтүлбөгөн ката кармалды: {e}")
    finally:
        # 'finally' блогу 'try' блогу ката менен аяктаса да,
        # ийгиликтүү аяктаса да, сөзсүз аткарылат.
        # Көбүнчө ресурстарды тазалоо үчүн колдонулат.
        print("\nFinally блогу: ката болсо да, болбосо да аткарылат.")

# Негизги асинхрондук функция
async def main():
    """Негизги аткаруучу корутина."""
    # Биринчи мисал: бир тапшырмадагы катаны кармоо
    await ката_менен_тапшырманы_чакыруу_жана_кармоо()

    # Экинчи мисал: asyncio.gather ичинде ката кетсе, аны кантип кармоо керек
    print("\n--- asyncio.gather менен ката кармоо ---")

    # asyncio.create_task() корутинаны 'Task' объектисине айландырат.
    # Бул 'gather'ге берүү үчүн ыңгайлуу.
    тапшырма1 = asyncio.create_task(ката_менен_тапшырма()) # Бул ката ыргытат
    тапшырма2 = asyncio.create_task(asyncio.sleep(0.5, result="Экинчи тапшырма ийгиликтүү")) # Бул ийгиликтүү

    # 'await asyncio.gather(..., return_exceptions=True)'
    # Эгер 'return_exceptions=True' коюлса, 'gather' ичиндеги кайсы бир
    # тапшырма ката менен аяктаса, 'gather' өзү дароо ката ыргытпайт.
    # Анын ордуна, ошол тапшырманын жыйынтыгы катары ката объектисин кайтарат.
    жыйынтыктар = await asyncio.gather(тапшырма1, тапшырма2, return_exceptions=True)

    # Жыйынтыктарды текшерүү
    for i, жыйынтык in enumerate(жыйынтыктар):
        # Эгер жыйынтык 'Exception' классынын объектиси болсо, демек ката болгон
        if isinstance(жыйынтык, Exception):
            print(f"Тапшырма {i+1} ката менен аяктады: {жыйынтык}")
        else:
            print(f"Тапшырма {i+1} ийгиликтүү: {жыйынтык}")


if __name__ == "__main__":
    asyncio.run(main())